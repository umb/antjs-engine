apply plugin: 'kotlin2js'
apply plugin: 'com.moowork.node'

archivesBaseName = 'antme-engine-js'

group 'ch.curoheroes.engine'
version '1-SNAPSHOT'

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

ext {
    nodeVersion = '8.11.3'
    qunitVersion = '2.6.1'
}

buildscript {
    ext.kotlinVersion = '1.2.50'

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.eriwen:gradle-js-plugin:2.14.1"
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlinVersion"
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core-js:0.23.3'

    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlinVersion"
}

[compileKotlin2Js, compileTestKotlin2Js]*.configure {
    kotlinOptions.moduleKind = "umd"
    kotlinOptions.sourceMap = true
    kotlinOptions.sourceMapEmbedSources = "always"
}

task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
    from compileKotlin2Js.destinationDir

    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    into "${buildDir}/node_modules"
}

node {
    version = nodeVersion
    download = true
}

task installQunit(type: NpmTask) {
    inputs.property('qunitVersion', qunitVersion)
    outputs.dir file('node_modules/qunit')

    args = ['install', "qunit@${qunitVersion}"]
}

task runQunit(type: NodeTask, dependsOn: [compileTestKotlin2Js, populateNodeModules, installQunit]) {
    script = file('node_modules/qunit/bin/qunit')
    args = [projectDir.toPath().relativize(file(compileTestKotlin2Js.outputFile).toPath())]
}

//test.dependsOn runQunit

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.kotlin
}

artifacts {
    archives sourcesJar
}
kotlin {
    experimental {
        coroutines "enable"
    }
}